import os
import matplotlib.pyplot as plt

if __name__ == "__main__":
    start = 60
    end = 90
    times_irp = []
    file = open("irp_results.txt", "r")
    irp_results = []
    for result in file.readlines():
        irp_results.append(float(result.split(" ")[0]))
        times_irp.append(float(result.split(" ")[1]))

    allCostsTotal = []
    labels = ["HGS-DSIRPR", "HGS-DSIRP"]
    for l, chemin_dossier in enumerate(["temp_results/DSIRPsol-end-dirp-", "temp_results_2/DSIRPsol-dirp-"]):
        all_costs = []
        times = []
        listInstance = []
        for nbClients in [5,10,15,25,50,75,100,125,150,200]:
            for p in [5,10,20]:
                for i in [1,2,3,4,5]:
                    listInstance.append(chemin_dossier + str(nbClients) + "-" + str(p) + "-" + str(i) + "_seed-42_veh-1_scenarios-10")
        
        for path in listInstance:
            file = open(path, "r")
            temp = file.readlines()
            time = 0
            for line in temp:
                idx = line.find("Best Solution Time")
                if (idx != -1):
                    time += float(line.split("Best Solution Time")[1][2:])
            times.append(time)
            all_costs.append(float(temp[-6:-5][0].split(" ")[2]))
        
        g1 = 0
        total = 0
        for i in range (60):
            g1 += (all_costs[i]-irp_results[i]) / all_costs[i]
        total += g1
        g1 /= 60

        g2 = 0
        for i in range (60,90):
            g2 += (all_costs[i]-irp_results[i]) / all_costs[i]
        total += g2
        g2 /= 30

        g3 = 0
        for i in range (90,150):
            g3 += (all_costs[i]-irp_results[i]) / all_costs[i]
        total += g3
        g3 /= 60
        print("small (n < 50) " + str(sum(all_costs[0:60])/60) + " " + str(sum(times[0:60])/60) + " " + str(g1 * 100))
        print("medium (50 <= n < 100) " + str(sum(all_costs[60:90])/30) + " " + str(sum(times[60:90])/30) + " " + str(g2 * 100))
        print("large ( n >= 100) " + str(sum(all_costs[90:150])/60) + " " + str(sum(times[90:150])/60) + " " + str(g3 * 100))
        print("Average " + str(sum(all_costs)/150) + " " + str(sum(times)/150) + " " + str((total/150) * 100))
        plt.scatter(all_costs[start:end],[i for i in range (start + 1, end + 1)], s=10,label=labels[l])
        allCostsTotal.append(all_costs)
        print("")

    coelho_results = []
    file = open("coelho_results.txt", "r")
    for result in file.readlines():
        coelho_results.append(float(result))

    print("Coelho:")
    g1 = 0
    total = 0
    for i in range (60):
        g1 += (coelho_results[i]-irp_results[i]) / coelho_results[i]
    total += g1
    g1 /= 60

    g2 = 0
    for i in range (60,90):
        g2 += (coelho_results[i]-irp_results[i]) / coelho_results[i]
    total += g2
    g2 /= 30

    g3 = 0
    for i in range (90,150):
        g3 += (coelho_results[i]-irp_results[i]) / coelho_results[i]
    total += g3
    g3 /= 60

    print("small (n < 50) " + str(sum(coelho_results[0:60])/60) + " " + str(g1 * 100))
    print("medium (50 <= n < 100) " + str(sum(coelho_results[60:90])/30) + " " + str(g2 * 100))
    print("large ( n >= 100) " + str(sum(coelho_results[90:150])/60) + " " + str(g3 * 100))
    print("Average " + str(sum(coelho_results)/150) + " " + str((total / 150) * 100) + "\n")

    print("IRP:")
    print("small (n < 50) " + str(sum(irp_results[0:60])/60) + " " + str(sum(times_irp[0:60])/60))
    print("medium (50 <= n < 100) " + str(sum(irp_results[60:90])/30) + " " + str(sum(times_irp[60:90])/30))
    print("large ( n >= 100) " + str(sum(irp_results[90:150])/60) + " " + str(sum(times_irp[90:150])/60))
    print("Average " + str(sum(irp_results)/150) + " " + str(sum(times_irp)/150))

    plt.scatter(coelho_results[start:end],[i for i in range (start + 1,end + 1)], s=10, label="Coelho")
    plt.scatter(irp_results[start:end],[i for i in range (start + 1, end+1)], s=10, label="HGS-IRP")
    for k in range(start + 1,end+1):
        plt.plot([min(irp_results[k-1], coelho_results[k-1]),max(coelho_results[k-1], allCostsTotal[0][k-1], allCostsTotal[1][k-1])], [k,k], color = "black", linewidth=0.5)
        
    plt.xlabel("Coût")
    plt.ylabel("Numéro de l'instance")
    plt.legend()
    plt.show()